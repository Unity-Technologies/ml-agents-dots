// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace Unity.AI.MLAgents
{
    public class Academy : System.IDisposable
    {
        public System.Action OnEnvironmentReset;
        public Unity.AI.MLAgents.EnvironmentParameters EnvironmentParameters { get; }
        public static Unity.AI.MLAgents.Academy Instance { get; }
        public bool IsCommunicatorOn { get; }
        public static bool IsInitialized { get; }
        public Unity.AI.MLAgents.StatsRecorder StatsRecorder { get; }
        public virtual void Dispose();
        public void RegisterPolicy(string policyId, Unity.AI.MLAgents.Policy policy, Unity.AI.MLAgents.IPolicyProcessor policyProcessor = default(Unity.AI.MLAgents.IPolicyProcessor), bool defaultRemote = True);
    }

    [System.Runtime.CompilerServices.Extension] public static class ActionHashMapUtils
    {
        [System.Runtime.CompilerServices.Extension] public static Unity.Collections.NativeHashMap<Unity.Entities.Entity, T> GenerateActionHashMap<T>(Unity.AI.MLAgents.Policy policy, Unity.Collections.Allocator allocator) where T : System.ValueType, new();
    }

    public enum ActionType
    {
        public const Unity.AI.MLAgents.ActionType CONTINUOUS = 1;
        public const Unity.AI.MLAgents.ActionType DISCRETE = 0;
        public int value__;
    }

    public struct ActuatorEvent
    {
        [Unity.Collections.ReadOnly] public int ActionSize;
        [Unity.Collections.ReadOnly] public Unity.AI.MLAgents.ActionType ActionType;
        [Unity.Collections.ReadOnly] public Unity.Entities.Entity Entity;
        public T GetAction<T>() where T : System.ValueType, new();
    }

    [System.Runtime.CompilerServices.Extension] public static class BarracudaPolicyProcessorRegistringExtension
    {
        [System.Runtime.CompilerServices.Extension] public static void RegisterPolicyWithBarracudaModel(Unity.AI.MLAgents.Policy policy, string policyId, Barracuda.NNModel model, Unity.AI.MLAgents.InferenceDevice inferenceDevice = 0);
        [System.Runtime.CompilerServices.Extension] public static void RegisterPolicyWithBarracudaModelForceNoCommunication(Unity.AI.MLAgents.Policy policy, string policyId, Barracuda.NNModel model, Unity.AI.MLAgents.InferenceDevice inferenceDevice = 0);
    }

    public struct DecisionRequest
    {
        public Unity.AI.MLAgents.DecisionRequest SetDiscreteActionMask(int branch, int actionIndex);
        public Unity.AI.MLAgents.DecisionRequest SetObservation(int sensorNumber, int sensor);
        public Unity.AI.MLAgents.DecisionRequest SetObservation<T>(int sensorNumber, T sensor) where T : System.ValueType, new();
        public Unity.AI.MLAgents.DecisionRequest SetObservationFromSlice(int sensorNumber, [Unity.Collections.ReadOnly] Unity.Collections.NativeSlice<float> obs);
        public Unity.AI.MLAgents.DecisionRequest SetReward(float r);
    }

    public sealed class EnvironmentParameters
    {
        public float GetWithDefault(string key, float defaultValue);
        public System.Collections.Generic.IList<string> Keys();
        public void RegisterCallback(string key, System.Action<float> action);
    }

    public struct EpisodeTermination
    {
        public Unity.AI.MLAgents.EpisodeTermination SetObservation(int sensorNumber, int sensor);
        public Unity.AI.MLAgents.EpisodeTermination SetObservation<T>(int sensorNumber, T sensor) where T : System.ValueType, new();
        public Unity.AI.MLAgents.EpisodeTermination SetObservationFromSlice(int sensorNumber, [Unity.Collections.ReadOnly] Unity.Collections.NativeSlice<float> obs);
        public Unity.AI.MLAgents.EpisodeTermination SetReward(float r);
    }

    [System.Runtime.CompilerServices.Extension] public static class HeristicPolicyProcessorRegistringExtension
    {
        [System.Runtime.CompilerServices.Extension] public static void RegisterPolicyWithHeuristic<TH>(Unity.AI.MLAgents.Policy policy, string policyId, System.Func<TH> heuristic) where TH : System.ValueType, new();
        [System.Runtime.CompilerServices.Extension] public static void RegisterPolicyWithHeuristicForceNoCommunication<TH>(Unity.AI.MLAgents.Policy policy, string policyId, System.Func<TH> heuristic) where TH : System.ValueType, new();
    }

    [Unity.Jobs.LowLevel.Unsafe.JobProducerType(typeof(Unity.AI.MLAgents.IActuatorJobExtensions.ActuatorDataJobProcess<>))] public interface IActuatorJob
    {
        public abstract void Execute(Unity.AI.MLAgents.ActuatorEvent jobData);
    }

    [System.Runtime.CompilerServices.Extension] public static class IActuatorJobExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static Unity.Jobs.JobHandle Schedule<T>(T jobData, Unity.AI.MLAgents.Policy policy, Unity.Jobs.JobHandle inputDeps) where T : System.ValueType, Unity.AI.MLAgents.IActuatorJob, new();
    }

    public enum InferenceDevice
    {
        public const Unity.AI.MLAgents.InferenceDevice CPU = 0;
        public const Unity.AI.MLAgents.InferenceDevice GPU = 1;
        public int value__;
    }

    public interface IPolicyProcessor : System.IDisposable
    {
        public abstract bool IsConnected { get; }
        public abstract void Process();
    }

    public class MLAgentsException : System.Exception
    {
        public MLAgentsException(string message) {}
    }

    public struct Policy : System.IDisposable
    {
        public bool IsCreated { get; }
        public Policy(int maximumNumberAgents, Unity.Mathematics.int3[] obsShapes, Unity.AI.MLAgents.ActionType actionType, int actionSize, int[] discreteActionBranches = default(int[])) {}
        public virtual void Dispose();
        public Unity.AI.MLAgents.EpisodeTermination EndEpisode(Unity.Entities.Entity entity);
        public Unity.AI.MLAgents.EpisodeTermination InterruptEpisode(Unity.Entities.Entity entity);
        public Unity.AI.MLAgents.DecisionRequest RequestDecision(Unity.Entities.Entity entity);
    }

    public struct PolicySpecs
    {
        public Unity.AI.MLAgents.Policy GetPolicy();
    }

    public enum StatAggregationMethod
    {
        public const Unity.AI.MLAgents.StatAggregationMethod Average = 0;
        public const Unity.AI.MLAgents.StatAggregationMethod MostRecent = 1;
        public int value__;
    }

    public sealed class StatsRecorder
    {
        public void Add(string key, float value, Unity.AI.MLAgents.StatAggregationMethod aggregationMethod = 0);
    }

    public static class TimeUtils
    {
        public static void DisableFixedRate(Unity.Entities.ComponentSystemGroup group);
        public static void EnableFixedRateWithRepeat(Unity.Entities.ComponentSystemGroup group, float timeStep, int numberOfRepeat);
    }

    public static class VisualObservationUtility
    {
        public static Unity.Collections.NativeArray<float> GetVisObs(UnityEngine.Camera camera, int width, int height, Unity.Collections.Allocator allocator = 2);
    }
}

namespace Unity.AI.MLAgents.SideChannels
{
    public class FloatPropertiesChannel : Unity.AI.MLAgents.SideChannels.SideChannel
    {
        public FloatPropertiesChannel(System.Guid channelId = default(System.Guid)) {}
        public float GetWithDefault(string key, float defaultValue);
        public System.Collections.Generic.IList<string> Keys();
        protected virtual void OnMessageReceived(Unity.AI.MLAgents.SideChannels.IncomingMessage msg);
        public void RegisterCallback(string key, System.Action<float> action);
        public void Set(string key, float value);
    }

    public class IncomingMessage : System.IDisposable
    {
        public IncomingMessage(byte[] data) {}
        public virtual void Dispose();
        public byte[] GetRawBytes();
        public bool ReadBoolean(bool defaultValue = False);
        public float ReadFloat32(float defaultValue = 0);
        public System.Collections.Generic.IList<float> ReadFloatList(System.Collections.Generic.IList<float> defaultValue = default(System.Collections.Generic.IList<float>));
        public int ReadInt32(int defaultValue = 0);
        public string ReadString(string defaultValue = default(string));
    }

    public class OutgoingMessage : System.IDisposable
    {
        public OutgoingMessage() {}
        public virtual void Dispose();
        public void SetRawBytes(byte[] data);
        public void WriteBoolean(bool b);
        public void WriteFloat32(float f);
        public void WriteFloatList(System.Collections.Generic.IList<float> floatList);
        public void WriteInt32(int i);
        public void WriteString(string s);
    }

    public class RawBytesChannel : Unity.AI.MLAgents.SideChannels.SideChannel
    {
        public RawBytesChannel(System.Guid channelId) {}
        public System.Collections.Generic.IList<byte[]> GetAndClearReceivedMessages();
        public System.Collections.Generic.IList<byte[]> GetReceivedMessages();
        protected virtual void OnMessageReceived(Unity.AI.MLAgents.SideChannels.IncomingMessage msg);
        public void SendRawBytes(byte[] data);
    }

    public abstract class SideChannel
    {
        public System.Guid ChannelId { get; protected set; }
        protected SideChannel() {}
        protected abstract void OnMessageReceived(Unity.AI.MLAgents.SideChannels.IncomingMessage msg);
        protected void QueueMessageToSend(Unity.AI.MLAgents.SideChannels.OutgoingMessage msg);
    }

    public static class SideChannelsManager
    {
        public static void RegisterSideChannel(Unity.AI.MLAgents.SideChannels.SideChannel sideChannel);
        public static void UnregisterSideChannel(Unity.AI.MLAgents.SideChannels.SideChannel sideChannel);
    }
}
